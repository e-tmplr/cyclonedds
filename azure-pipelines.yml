#
# Copyright(c) 2021 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

trigger: [ '*' ]
pr: [ '*' ]


variables:
  cyclonedds_uri: '<CycloneDDS><Domain><Internal><EnableExpensiveChecks>rhc,whc</EnableExpensiveChecks><LivelinessMonitoring>true</LivelinessMonitoring></Internal><Tracing><Verbosity>config</Verbosity><OutputFile>stderr</OutputFile></Tracing></Domain></CycloneDDS>'

jobs:
- job: build_and_test
  displayName: Build and test Cyclone
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Ubuntu 22.04 LTS (Release, x86_64)':
        image: ubuntu-22.04
        build_type: Release
        sanitizer: undefined
        cc: gcc
      'Windows 2019 with GCC 10 (Debug, x86_64)':
        image: windows-2019
        build_type: Debug
        idlc_xtests: off
        generator: 'MinGW Makefiles'
        toolchain_file: toolchain-mingw64.cmake
      'Windows 2019 with GCC 10 (Debug, x86)':
        image: windows-2019
        build_type: Debug
        idlc_xtests: off
        generator: 'MinGW Makefiles'
        toolchain_file: toolchain-mingw32.cmake

  steps:
    - template: /.azure/templates/build-test.yml

- job: coverage_and_test_report
  displayName: Coverage and Tests Report
  dependsOn: build_and_test
  condition: succeededOrFailed()  # Always run, even when failed tests, because they should be reported in the dasboard of course!
  pool:
    vmImage: ubuntu-20.04
  steps:
  - bash: |
      mkdir coverage
  - task: DownloadPipelineArtifact@2
    inputs:
      path: coverage
    displayName: Download Coverage
  - task: UsePythonVersion@0
  - bash: |
      python -m pip install gcovr==5.0 --user --upgrade
      ls coverage
      gcovr -a coverage/**/*.json --xml-pretty --output coverage.xml
    displayName: Combine coverage reports
  - task: PublishCodeCoverageResults@1
    displayName: Publish Cobertura Coverage Report
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: coverage.xml

- job: python_binding
  displayName: Python Binding
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Test and fuzzing (Ubuntu 22.04 LTS, Clang 13, Debug)':
        image: ubuntu-22.04
        cc: clang-13
        build_type: Debug
  steps:
    - template: /.azure/templates/python-binding.yml

- job: cxx_binding
  displayName: C++ Binding
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Build and test (Ubuntu 22.04 LTS, Clang 13, Debug)':
        image: ubuntu-22.04
        cc: clang-13
        build_type: Debug
  steps:
    - template: /.azure/templates/cxx-binding.yml
